<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGNCurrency</name>
    </assembly>
    <members>
        <member name="T:RGN.Modules.Currency.CurrencyModule">
            <summary>
            Module for managing in game currency (IAP)
            The RGNCoin is a special currency that you need to sell only by in-app purchases
            It is possible to use also custom currencies that you can sell by in-app,
            or just give the user as a currencies
            </summary>
        </member>
        <member name="M:RGN.Modules.Currency.CurrencyModule.GetRGNCoinEconomyAsync(System.Threading.CancellationToken)">
            <summary>
            Gets the information for rgn-coin prices
            You need to use the in-app purchase process to sell rgn-coin
            rgn-coin is used for purchasing NFT virtual items
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Currency.CurrencyModule.PurchaseRGNCoinAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Adds the rgn-coin currency to the user in
            in-app purchase plugin callback after verifying the reciept locally
            1. Start in-app purchase process
            2. Wait for the user to make the in-app purchase transaction
            3. Verify locally on device the reciept after successful purchase
            4. Call this method with the appropriate in-app item id (<see cref="M:RGN.Modules.Currency.CurrencyModule.GetRGNCoinEconomyAsync(System.Threading.CancellationToken)"/>)
            Note: this method requires valid ApiKey in your RGN credentials.
            </summary>
            <param name="iapUUID">Unique id of the rgn-coin pack that was returned by the <see cref="M:RGN.Modules.Currency.CurrencyModule.GetRGNCoinEconomyAsync(System.Threading.CancellationToken)"/> method</param>
            <param name="iapTransactionId">The transaction id of the in-app purchase</param>
            <param name="iapReceipt">The receipt of the in-app purchase</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Currency.CurrencyModule.GetInAppPurchaseCurrencyDataAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all available currency product from Ready backend
            The list can contain any game specific currencies
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Currency.CurrencyModule.PurchaseCurrencyProductAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Adds any project specific currency to the users profile.
            You can also use this method without going to the in-app purchase process if you want to give the player a currencies
            </summary>
            <param name="productId"></param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns></returns>
        </member>
        <member name="M:RGN.Modules.Currency.CurrencyModule.AddUserCurrenciesAsync(System.Collections.Generic.List{RGN.Modules.Currency.Currency},System.Threading.CancellationToken)">
            <summary>
            Adds any "soft" currency to the user profile.
            If the currency is registered as a product (<see cref="M:RGN.Modules.Currency.CurrencyModule.GetInAppPurchaseCurrencyDataAsync(System.Threading.CancellationToken)"/>)
            then this operation will fail. It is allowed to add only currency products
            that are not for sale as a in-app purchase item
            </summary>
            <param name="currencies">The currencies to add</param>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>Updated user currencies</returns>
        </member>
        <member name="M:RGN.Modules.Currency.CurrencyModule.GetUserCurrenciesAsync(System.Threading.CancellationToken)">
            <summary>
            Returns a list of the user currencies for your app. 
            </summary>
            <param name="cancellationToken">A token to cancel the operation.</param>
            <returns>List of user currencies</returns>
        </member>
        <member name="T:RGN.Modules.Currency.Currency">
            <summary>
            Represents currency data
            </summary>
        </member>
        <member name="F:RGN.Modules.Currency.Currency.appIds">
            <summary>
            List of app identifiers that this currency belongs to
            </summary>
        </member>
        <member name="F:RGN.Modules.Currency.Currency.name">
            <summary>
            Name of the currency. Reserved name is 'rgn-coin'
            </summary>
        </member>
        <member name="F:RGN.Modules.Currency.Currency.quantity">
            <summary>
            The amount of currency
            </summary>
        </member>
        <member name="M:RGN.Modules.Currency.Currency.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:RGN.Modules.Currency.Currency.#ctor(System.String,System.Int32)">
            <summary>
            Constructor that accepts the name and the quauntity of a currency
            </summary>
            <param name="name"></param>
            <param name="quantity"></param>
        </member>
    </members>
</doc>
